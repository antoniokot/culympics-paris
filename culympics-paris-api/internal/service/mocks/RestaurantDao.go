// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/antoniokot/culympics-paris/culympics-paris-api/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RestaurantDao is an autogenerated mock type for the RestaurantDao type
type RestaurantDao struct {
	mock.Mock
}

type RestaurantDao_Expecter struct {
	mock *mock.Mock
}

func (_m *RestaurantDao) EXPECT() *RestaurantDao_Expecter {
	return &RestaurantDao_Expecter{mock: &_m.Mock}
}

// Fetch provides a mock function with given fields: _a0, _a1
func (_m *RestaurantDao) Fetch(_a0 context.Context, _a1 uuid.UUID) (model.Restaurant, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 model.Restaurant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.Restaurant, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Restaurant); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Restaurant)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestaurantDao_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type RestaurantDao_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *RestaurantDao_Expecter) Fetch(_a0 interface{}, _a1 interface{}) *RestaurantDao_Fetch_Call {
	return &RestaurantDao_Fetch_Call{Call: _e.mock.On("Fetch", _a0, _a1)}
}

func (_c *RestaurantDao_Fetch_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *RestaurantDao_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *RestaurantDao_Fetch_Call) Return(_a0 model.Restaurant, _a1 error) *RestaurantDao_Fetch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RestaurantDao_Fetch_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.Restaurant, error)) *RestaurantDao_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *RestaurantDao) List(_a0 context.Context, _a1 model.RestaurantListingFilters) ([]model.Restaurant, model.Paging, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []model.Restaurant
	var r1 model.Paging
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RestaurantListingFilters) ([]model.Restaurant, model.Paging, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.RestaurantListingFilters) []model.Restaurant); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Restaurant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.RestaurantListingFilters) model.Paging); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(model.Paging)
	}

	if rf, ok := ret.Get(2).(func(context.Context, model.RestaurantListingFilters) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RestaurantDao_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type RestaurantDao_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.RestaurantListingFilters
func (_e *RestaurantDao_Expecter) List(_a0 interface{}, _a1 interface{}) *RestaurantDao_List_Call {
	return &RestaurantDao_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *RestaurantDao_List_Call) Run(run func(_a0 context.Context, _a1 model.RestaurantListingFilters)) *RestaurantDao_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.RestaurantListingFilters))
	})
	return _c
}

func (_c *RestaurantDao_List_Call) Return(_a0 []model.Restaurant, _a1 model.Paging, _a2 error) *RestaurantDao_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RestaurantDao_List_Call) RunAndReturn(run func(context.Context, model.RestaurantListingFilters) ([]model.Restaurant, model.Paging, error)) *RestaurantDao_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewRestaurantDao creates a new instance of RestaurantDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRestaurantDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *RestaurantDao {
	mock := &RestaurantDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
